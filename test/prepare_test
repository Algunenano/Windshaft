#!/bin/sh

# This is where postgresql connection parameters are read from
TESTENV=../config/environments/test

# Extract postgres configuration

pgUSER=`node -e "console.log(require('${TESTENV}').postgres.user || '')"`
if [ -n "${pgUSER}" ]; then
  export PGUSER=${pgUSER}
  echo "PGUSER: [$PGUSER]"
fi

pgHOST=`node -e "console.log(require('${TESTENV}').postgres.host || '')"`
if [ -n "${pgHOST}" ]; then
  export PGHOST=${pgHOST}
  echo "PGHOST: [$PGHOST]"
fi

pgPORT=`node -e "console.log(require('${TESTENV}').postgres.port || '')"`
if [ -n "${pgPORT}" ]; then
  export PGPORT=${pgPORT}
  echo "PGPORT: [$PGPORT]"
fi

# Sets the env variable POSTGIS_VERSION as Major * 10000 + Minor * 100 + Patch
# For example, for 2.4.5 ~> 20405
auto_postgis_version() {
    local POSTGIS_STR=$(psql -c "Select default_version from pg_available_extensions WHERE name = 'postgis';" -t);
    local pg_version=$(echo $POSTGIS_STR | awk -F '.' '{print $1 * 10000 + $2 * 100 + $3}')

    echo $pg_version
}

if [ -z "$POSTGIS_VERSION" ]; then
    export POSTGIS_VERSION=$(auto_postgis_version)
    echo "POSTGIS_VERSION: [$POSTGIS_VERSION]"
fi

die() {
        msg=$1
        echo "${msg}" >&2
        exit 1
}

echo "...Configuring Windshaft test database"

echo "...Recreating windshaft_test database"
dropdb windshaft_test | 2>&1
createdb -EUTF8 windshaft_test || die "Could not create test database"

psql -c 'create extension postgis' windshaft_test ||
  die "Could not install postgis in test database"

if [ $POSTGIS_VERSION -ge 30000 ]; then
    echo "Postgis 3+ detected: Installing Postgis Raster extension too"
    psql -c 'create extension postgis_raster' windshaft_test ||  die "Could not install postgis_raster"
fi

for i in CDB_QueryStatements CDB_QueryTables
do
  echo "...Installing $i"
  #curl -L -s https://raw.githubusercontent.com/CartoDB/cartodb-postgresql/master/scripts-available/$i.sql -o sql/$i.sql
  cat sql/$i.sql | psql -v ON_ERROR_STOP=1 windshaft_test || exit 1
done

dropdb windshaft_test2 | 2>&1
createdb -T windshaft_test -E UTF8 windshaft_test2 || die "Could not create test database 2"

echo "...Populating windshaft_test database with test data"
psql --set ON_ERROR_STOP=1 -d windshaft_test -f ./fixtures/windshaft.test.sql ||
  die "Cound not populate test database"

echo "...Populating windshaft_test database with reduced populated places data"
psql --set ON_ERROR_STOP=1 -d windshaft_test -f ./fixtures/populated_places_simple_reduced.sql ||
  die "Cound not populate test database"

psql -c 'VACUUM ANALYZE test_table;' windshaft_test ||
  die "Could not generate stats for test_table in windshaft database"
psql -c 'VACUUM ANALYZE test_table_2;' windshaft_test ||
  die "Could not generate stats for test_table_2 in windshaft database"
psql -c 'VACUUM ANALYZE test_table_3;' windshaft_test ||
    die "Could not generate stats for test_table_3 in windshaft database"

echo "...Test database configuration complete"

#!/bin/sh

# This is where postgresql connection parameters are read from
TESTENV=../config/environments/test

# Extract postgres configuration

pgUSER=`node -e "console.log(require('${TESTENV}').postgres.user || '')"`
if [ -n "${pgUSER}" ]; then
  export PGUSER=${pgUSER}
  echo "PGUSER: [$PGUSER]"
fi

pgHOST=`node -e "console.log(require('${TESTENV}').postgres.host || '')"`
if [ -n "${pgHOST}" ]; then
  export PGHOST=${pgHOST}
  echo "PGHOST: [$PGHOST]"
fi

pgPORT=`node -e "console.log(require('${TESTENV}').postgres.port || '')"`
if [ -n "${pgPORT}" ]; then
  export PGPORT=${pgPORT}
  echo "PGPORT: [$PGPORT]"
fi

die() {
        msg=$1
        echo "${msg}" >&2
        exit 1
}

echo "...Configuring Windshaft test database"

echo "...Recreating windshaft_test database"
dropdb windshaft_test | 2>&1
createdb -EUTF8 windshaft_test || die "Could not create test database"

psql -c 'create extension postgis' windshaft_test ||
  die "Could not install postgis in test database"

psql -c 'CREATE LANGUAGE plpythonu' windshaft_test ||
  die "Could not install plpythonu in test database"
#  curl -L -s https://raw.githubusercontent.com/CartoDB/cartodb-postgresql/master/scripts-available/CDB_XYZ.sql -o CDB_XYZ.sql
echo "...Installing CDB_XYZ"
cat sql/CDB_XYZ.sql | psql -v ON_ERROR_STOP=1 windshaft_test || exit 1
#  curl -L -s https://raw.githubusercontent.com/CartoDB/cartodb-postgresql/master/scripts-available/CDB_QueryStatements.sql -o CDB_QueryStatements.sql
echo "...Installing CDB_QueryStatements"
cat sql/CDB_QueryStatements.sql | psql -v ON_ERROR_STOP=1 windshaft_test || exit 1
#  curl -L -s https://raw.githubusercontent.com/CartoDB/cartodb-postgresql/master/scripts-available/CDB_QueryTables.sql -o CDB_QueryTables.sql
echo "...Installing CDB_QueryTables"
cat sql/CDB_QueryTables.sql | psql -v ON_ERROR_STOP=1 windshaft_test || exit 1
#  curl -L -s https://raw.githubusercontent.com/CartoDB/cartodb-postgresql/master/scripts-available/CDB_QuantileBins.sql -o CDB_QuantileBins.sql
echo "...Installing CDB_QuantileBins"
cat sql/CDB_QuantileBins.sql | psql -v ON_ERROR_STOP=1 windshaft_test || exit 1

dropdb windshaft_test2 | 2>&1
createdb -T windshaft_test -E UTF8 windshaft_test2 || die "Could not create test database 2"

echo "...Populating windshaft_test database with test data"
psql --set ON_ERROR_STOP=1 -d windshaft_test -f ./fixtures/windshaft.test.sql ||
  die "Cound not populate test database"

echo "...Populating windshaft_test database with reduced populated places data"
psql --set ON_ERROR_STOP=1 -d windshaft_test -f ./fixtures/populated_places_simple_reduced.sql ||
  die "Cound not populate test database"

psql -c 'VACUUM ANALYZE test_table;' windshaft_test ||
  die "Could not generate stats for test_table in windshaft database"
psql -c 'VACUUM ANALYZE test_table_2;' windshaft_test ||
  die "Could not generate stats for test_table_2 in windshaft database"
psql -c 'VACUUM ANALYZE test_table_3;' windshaft_test ||
    die "Could not generate stats for test_table_3 in windshaft database"

echo "...Test database configuration complete"

Renderers are expected to expose the following interfaces:

  /// Get a tile given ZXY params
  //
  /// @param z zoom level
  /// @param x 
  /// @param y 
  /// @param callback function(err, tileobj, meta)
  ///   - 'err' will be an instance of Error on any problem, or null.
  ///   - 'tileobj' will be an opaque object 
  ///   - 'meta' will contain info about 'tileobj', like:
  ///     * 'Content-Type' mime-type of the tile, for example:
  ///                      'image/png', 'text/javascript; charset=utf-8', 
  ///
  getTile(z, x, y, callback)

  /// Get metadata information about the tileset
  //
  /// @param callback function(err, meta)
  ///
  /// Format of the 'meta' object is renderer-specific,
  /// see renderer documentation for that.
  ///
  getMetadata(callback)

They are created by renderer factories having the following
interface:

  /// Create a renderer given a map and data store configuration 
  //
  /// @param mapConfig map configuration, see
  ///        http://github.com/CartoDB/Windshaft/wiki/MapConfig-specification
  /// @param dbParams datastore configuration, with supported members:
  ///        user,pass,host,port,dbname
  /// @param format output format for the tile
  /// @param layer layer number within the mapConfig
  /// @param callback function(err, renderer)
  ///
  createRenderer(mapConfig, dbParams, format, layer, callback)

  /// Destroy a renderer 
  //
  /// Disposed renderers should not be used anymore
  ///
  disposeRenderer(renderer, callback)

